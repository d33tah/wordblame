#!/usr/bin/env python

"""
Performs a word-by-word "blame" command, as known from version control
systems.

Usually "blame" is implemented on a per-line basis - this program is an
attempt at creating a tool that would enable the user to find out which change
introduced a particular word.

For usage information, run this program with --help command-line argument.

Author: Jacek Wielemborek, licensed under WTFPL.
"""


import subprocess
import sys
import uuid
import os
import pipes


def setup_git_repo(args, gitdir, space_marker, fpath):

    subprocess.call(['git', 'init', '-q', gitdir])
    if args.verbose:
        sys.stderr.write('Reading article list...\n')
    articles = subprocess.check_output(args.list_cmd,
                                       shell=True).rstrip('\r\n').split('\n')

    # Generate an empty "file" and add the first commit
    open(fpath, 'w').close()
    subprocess.call(['git', '-C', gitdir, 'add', 'file'],
                    stdout=subprocess.PIPE)
    subprocess.call(['git', '-C', gitdir, 'commit', '-q', '-m' 'first commit'])

    return articles


def add_article(args, article_id, gitdir, space_marker, fpath):

    article_id = article_id.rstrip('\r\n')
    cmd = '%s %s' % (args.get_cmd, pipes.quote(article_id))
    if args.verbose:
        sys.stderr.write('Calling %s\n' % repr(cmd))
    article = subprocess.check_output(cmd, shell=True)

    with open(fpath, 'w') as f:
        f.write(article.replace(' ', space_marker + '\n'))

    subprocess.call(['git', '-C', gitdir, 'commit', '-q', 'file',
                     '-m', article_id])


def report(args, gitdir, space_marker, fpath):

    skipped_sample = ('84b3b2ad (Jacek Wielemborek '
                      '2015-11-30 11:33:20 +0100   87) ')

    blamed = subprocess.check_output(['git', '-C', gitdir, 'blame', 'file'])

    for line in blamed.split('\n'):
        if line == '':
            continue

        commit = line.split()[0]
        cmd = ['git', '-C', gitdir, 'show', '-s', '--format=%B', commit]
        article_id = subprocess.check_output(cmd).rstrip()

        text = line[len(skipped_sample):].rstrip()

        color = commit[:6]
        href_start = '<a href="%s" style="color: #%s">' % (article_id, color)
        sys.stdout.write(href_start)

        if text.endswith(space_marker):
            sys.stdout.write(text[:-len(space_marker)] + ' ')
        else:
            sys.stdout.write(text)
            sys.stdout.write('<br />\n')

        sys.stdout.write('</a>')


def main(args):

    space_marker = args.space_marker or str(uuid.uuid4())
    if args.verbose:
        sys.stderr.write('Space marker is %s.\n' % repr(space_marker))

    if not args.gitdir:
        gitdir = subprocess.check_output(['mktemp', '-d']).rstrip('\r\n')
        if args.keep_repo and args.verbose:
            msg = 'Created temporary directory %s.\n' % repr(gitdir)
            sys.stderr.write(msg)
    else:
        gitdir = args.gitdir

    fpath = os.sep.join([gitdir, 'file'])

    try:
        if not args.just_report:
            articles = setup_git_repo(args, gitdir, space_marker, fpath)
            for article_id in articles:
                add_article(args, article_id, gitdir, space_marker, fpath)
        report(args, gitdir, space_marker, fpath)

    finally:
        if not args.keep_repo:
            subprocess.call(['rm', '-rf', gitdir])

if __name__ == '__main__':

    import argparse
    cls = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=cls)

    parser.add_argument('--list-cmd', help='Command that will be used to '
                        'generate a list of articles that will be inspected.')

    parser.add_argument('--get-cmd', help='Command that takes the article ID '
                        'generated by --list-cmd and prints related article.')

    parser.add_argument('--keep-repo', action='store_true', help='Keep the '
                        'temporary Git repository generated by this program.')

    parser.add_argument('--verbose', action='store_true', help='Show '
                        'information about program\'s progress.')

    parser.add_argument('--just-report', action='store_true', help='Skip '
                        'article reading part, just report based on git repo '
                        'path')

    parser.add_argument('--space-marker', help='Unique delimiter used instead'
                        ' of spaces. By default, a random one is used.')

    parser.add_argument('--gitdir', help='Directory where Git repository '
                        'would be stored.')

    # TODO: just-report should make --get-cmd and --list-cmd not required

    args = parser.parse_args()
    main(args)
